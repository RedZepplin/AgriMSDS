# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  isAdmin: Boolean
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
  isAdmin: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
  isAdmin: Boolean
  createdAt: DateTime
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
  isAdmin: Boolean
  createdAt: DateTime
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  content: Post_content_Document
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input PostUpdateInput {
  title: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: JSON
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type Product {
  id: ID!
  tradeName: String
  activeIngredient(where: ProductIngredientWhereInput! = {}, orderBy: [ProductIngredientOrderByInput!]! = [], take: Int, skip: Int! = 0): [ProductIngredient!]
  activeIngredientCount(where: ProductIngredientWhereInput! = {}): Int
  regCodes(where: RegCodeWhereInput! = {}, orderBy: [RegCodeOrderByInput!]! = [], take: Int, skip: Int! = 0): [RegCode!]
  regCodesCount(where: RegCodeWhereInput! = {}): Int
  regCo: RegCompany
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  tradeName: StringFilter
  activeIngredient: ProductIngredientManyRelationFilter
  regCodes: RegCodeManyRelationFilter
  regCo: RegCompanyWhereInput
}

input ProductIngredientManyRelationFilter {
  every: ProductIngredientWhereInput
  some: ProductIngredientWhereInput
  none: ProductIngredientWhereInput
}

input RegCodeManyRelationFilter {
  every: RegCodeWhereInput
  some: RegCodeWhereInput
  none: RegCodeWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  tradeName: OrderDirection
}

input ProductUpdateInput {
  tradeName: String
  activeIngredient: ProductIngredientRelateToManyForUpdateInput
  regCodes: RegCodeRelateToManyForUpdateInput
  regCo: RegCompanyRelateToOneForUpdateInput
}

input ProductIngredientRelateToManyForUpdateInput {
  disconnect: [ProductIngredientWhereUniqueInput!]
  set: [ProductIngredientWhereUniqueInput!]
  create: [ProductIngredientCreateInput!]
  connect: [ProductIngredientWhereUniqueInput!]
}

input RegCodeRelateToManyForUpdateInput {
  disconnect: [RegCodeWhereUniqueInput!]
  set: [RegCodeWhereUniqueInput!]
  create: [RegCodeCreateInput!]
  connect: [RegCodeWhereUniqueInput!]
}

input RegCompanyRelateToOneForUpdateInput {
  create: RegCompanyCreateInput
  connect: RegCompanyWhereUniqueInput
  disconnect: Boolean
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  tradeName: String
  activeIngredient: ProductIngredientRelateToManyForCreateInput
  regCodes: RegCodeRelateToManyForCreateInput
  regCo: RegCompanyRelateToOneForCreateInput
}

input ProductIngredientRelateToManyForCreateInput {
  create: [ProductIngredientCreateInput!]
  connect: [ProductIngredientWhereUniqueInput!]
}

input RegCodeRelateToManyForCreateInput {
  create: [RegCodeCreateInput!]
  connect: [RegCodeWhereUniqueInput!]
}

input RegCompanyRelateToOneForCreateInput {
  create: RegCompanyCreateInput
  connect: RegCompanyWhereUniqueInput
}

type ChemicalClass {
  id: ID!
  chemClass: String
  moa: String
  rac: String
  classCode: String
  activeIngredients(where: ActiveIngredientRegisterWhereInput! = {}, orderBy: [ActiveIngredientRegisterOrderByInput!]! = [], take: Int, skip: Int! = 0): [ActiveIngredientRegister!]
  activeIngredientsCount(where: ActiveIngredientRegisterWhereInput! = {}): Int
}

input ChemicalClassWhereUniqueInput {
  id: ID
  chemClass: String
}

input ChemicalClassWhereInput {
  AND: [ChemicalClassWhereInput!]
  OR: [ChemicalClassWhereInput!]
  NOT: [ChemicalClassWhereInput!]
  id: IDFilter
  chemClass: StringFilter
  moa: StringFilter
  rac: StringNullableFilter
  classCode: StringFilter
  activeIngredients: ActiveIngredientRegisterManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input ActiveIngredientRegisterManyRelationFilter {
  every: ActiveIngredientRegisterWhereInput
  some: ActiveIngredientRegisterWhereInput
  none: ActiveIngredientRegisterWhereInput
}

input ChemicalClassOrderByInput {
  id: OrderDirection
  chemClass: OrderDirection
  moa: OrderDirection
  rac: OrderDirection
  classCode: OrderDirection
}

input ChemicalClassUpdateInput {
  chemClass: String
  moa: String
  rac: String
  classCode: String
  activeIngredients: ActiveIngredientRegisterRelateToManyForUpdateInput
}

input ActiveIngredientRegisterRelateToManyForUpdateInput {
  disconnect: [ActiveIngredientRegisterWhereUniqueInput!]
  set: [ActiveIngredientRegisterWhereUniqueInput!]
  create: [ActiveIngredientRegisterCreateInput!]
  connect: [ActiveIngredientRegisterWhereUniqueInput!]
}

input ChemicalClassUpdateArgs {
  where: ChemicalClassWhereUniqueInput!
  data: ChemicalClassUpdateInput!
}

input ChemicalClassCreateInput {
  chemClass: String
  moa: String
  rac: String
  classCode: String
  activeIngredients: ActiveIngredientRegisterRelateToManyForCreateInput
}

input ActiveIngredientRegisterRelateToManyForCreateInput {
  create: [ActiveIngredientRegisterCreateInput!]
  connect: [ActiveIngredientRegisterWhereUniqueInput!]
}

type ActiveIngredientRegister {
  id: ID!
  activeIngredient: String
  chemClass: ChemicalClass
  notes: ActiveIngredientRegister_notes_Document
}

type ActiveIngredientRegister_notes_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ActiveIngredientRegisterWhereUniqueInput {
  id: ID
  activeIngredient: String
}

input ActiveIngredientRegisterWhereInput {
  AND: [ActiveIngredientRegisterWhereInput!]
  OR: [ActiveIngredientRegisterWhereInput!]
  NOT: [ActiveIngredientRegisterWhereInput!]
  id: IDFilter
  activeIngredient: StringFilter
  chemClass: ChemicalClassWhereInput
}

input ActiveIngredientRegisterOrderByInput {
  id: OrderDirection
  activeIngredient: OrderDirection
}

input ActiveIngredientRegisterUpdateInput {
  activeIngredient: String
  chemClass: ChemicalClassRelateToOneForUpdateInput
  notes: JSON
}

input ChemicalClassRelateToOneForUpdateInput {
  create: ChemicalClassCreateInput
  connect: ChemicalClassWhereUniqueInput
  disconnect: Boolean
}

input ActiveIngredientRegisterUpdateArgs {
  where: ActiveIngredientRegisterWhereUniqueInput!
  data: ActiveIngredientRegisterUpdateInput!
}

input ActiveIngredientRegisterCreateInput {
  activeIngredient: String
  chemClass: ChemicalClassRelateToOneForCreateInput
  notes: JSON
}

input ChemicalClassRelateToOneForCreateInput {
  create: ChemicalClassCreateInput
  connect: ChemicalClassWhereUniqueInput
}

type RegCompany {
  id: ID!
  regName: String
  regNo: String
  address: String
  tel: String
  website: String
  regProducts(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0): [Product!]
  regProductsCount(where: ProductWhereInput! = {}): Int
}

input RegCompanyWhereUniqueInput {
  id: ID
}

input RegCompanyWhereInput {
  AND: [RegCompanyWhereInput!]
  OR: [RegCompanyWhereInput!]
  NOT: [RegCompanyWhereInput!]
  id: IDFilter
  regName: StringFilter
  regNo: StringFilter
  address: StringFilter
  tel: StringFilter
  website: StringFilter
  regProducts: ProductManyRelationFilter
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input RegCompanyOrderByInput {
  id: OrderDirection
  regName: OrderDirection
  regNo: OrderDirection
  address: OrderDirection
  tel: OrderDirection
  website: OrderDirection
}

input RegCompanyUpdateInput {
  regName: String
  regNo: String
  address: String
  tel: String
  website: String
  regProducts: ProductRelateToManyForUpdateInput
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input RegCompanyUpdateArgs {
  where: RegCompanyWhereUniqueInput!
  data: RegCompanyUpdateInput!
}

input RegCompanyCreateInput {
  regName: String
  regNo: String
  address: String
  tel: String
  website: String
  regProducts: ProductRelateToManyForCreateInput
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

type RegCode {
  id: ID!
  country: String
  regCode: String
  product: Product
}

input RegCodeWhereUniqueInput {
  id: ID
}

input RegCodeWhereInput {
  AND: [RegCodeWhereInput!]
  OR: [RegCodeWhereInput!]
  NOT: [RegCodeWhereInput!]
  id: IDFilter
  country: StringFilter
  regCode: StringFilter
  product: ProductWhereInput
}

input RegCodeOrderByInput {
  id: OrderDirection
  country: OrderDirection
  regCode: OrderDirection
}

input RegCodeUpdateInput {
  country: String
  regCode: String
  product: ProductRelateToOneForUpdateInput
}

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input RegCodeUpdateArgs {
  where: RegCodeWhereUniqueInput!
  data: RegCodeUpdateInput!
}

input RegCodeCreateInput {
  country: String
  regCode: String
  product: ProductRelateToOneForCreateInput
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

type ProductIngredient {
  id: ID!
  ingredient: ActiveIngredientRegister
  product: Product
  metric: String
  concentration: Int
}

input ProductIngredientWhereUniqueInput {
  id: ID
}

input ProductIngredientWhereInput {
  AND: [ProductIngredientWhereInput!]
  OR: [ProductIngredientWhereInput!]
  NOT: [ProductIngredientWhereInput!]
  id: IDFilter
  ingredient: ActiveIngredientRegisterWhereInput
  product: ProductWhereInput
  metric: StringNullableFilter
  concentration: IntNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ProductIngredientOrderByInput {
  id: OrderDirection
  metric: OrderDirection
  concentration: OrderDirection
}

input ProductIngredientUpdateInput {
  ingredient: ActiveIngredientRegisterRelateToOneForUpdateInput
  product: ProductRelateToOneForUpdateInput
  metric: String
  concentration: Int
}

input ActiveIngredientRegisterRelateToOneForUpdateInput {
  create: ActiveIngredientRegisterCreateInput
  connect: ActiveIngredientRegisterWhereUniqueInput
  disconnect: Boolean
}

input ProductIngredientUpdateArgs {
  where: ProductIngredientWhereUniqueInput!
  data: ProductIngredientUpdateInput!
}

input ProductIngredientCreateInput {
  ingredient: ActiveIngredientRegisterRelateToOneForCreateInput
  product: ProductRelateToOneForCreateInput
  metric: String
  concentration: Int
}

input ActiveIngredientRegisterRelateToOneForCreateInput {
  create: ActiveIngredientRegisterCreateInput
  connect: ActiveIngredientRegisterWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(where: ProductWhereUniqueInput!, data: ProductUpdateInput!): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createChemicalClass(data: ChemicalClassCreateInput!): ChemicalClass
  createChemicalClasses(data: [ChemicalClassCreateInput!]!): [ChemicalClass]
  updateChemicalClass(where: ChemicalClassWhereUniqueInput!, data: ChemicalClassUpdateInput!): ChemicalClass
  updateChemicalClasses(data: [ChemicalClassUpdateArgs!]!): [ChemicalClass]
  deleteChemicalClass(where: ChemicalClassWhereUniqueInput!): ChemicalClass
  deleteChemicalClasses(where: [ChemicalClassWhereUniqueInput!]!): [ChemicalClass]
  createActiveIngredientRegister(data: ActiveIngredientRegisterCreateInput!): ActiveIngredientRegister
  createActiveIngredientRegisters(data: [ActiveIngredientRegisterCreateInput!]!): [ActiveIngredientRegister]
  updateActiveIngredientRegister(where: ActiveIngredientRegisterWhereUniqueInput!, data: ActiveIngredientRegisterUpdateInput!): ActiveIngredientRegister
  updateActiveIngredientRegisters(data: [ActiveIngredientRegisterUpdateArgs!]!): [ActiveIngredientRegister]
  deleteActiveIngredientRegister(where: ActiveIngredientRegisterWhereUniqueInput!): ActiveIngredientRegister
  deleteActiveIngredientRegisters(where: [ActiveIngredientRegisterWhereUniqueInput!]!): [ActiveIngredientRegister]
  createRegCompany(data: RegCompanyCreateInput!): RegCompany
  createRegCompanies(data: [RegCompanyCreateInput!]!): [RegCompany]
  updateRegCompany(where: RegCompanyWhereUniqueInput!, data: RegCompanyUpdateInput!): RegCompany
  updateRegCompanies(data: [RegCompanyUpdateArgs!]!): [RegCompany]
  deleteRegCompany(where: RegCompanyWhereUniqueInput!): RegCompany
  deleteRegCompanies(where: [RegCompanyWhereUniqueInput!]!): [RegCompany]
  createRegCode(data: RegCodeCreateInput!): RegCode
  createRegCodes(data: [RegCodeCreateInput!]!): [RegCode]
  updateRegCode(where: RegCodeWhereUniqueInput!, data: RegCodeUpdateInput!): RegCode
  updateRegCodes(data: [RegCodeUpdateArgs!]!): [RegCode]
  deleteRegCode(where: RegCodeWhereUniqueInput!): RegCode
  deleteRegCodes(where: [RegCodeWhereUniqueInput!]!): [RegCode]
  createProductIngredient(data: ProductIngredientCreateInput!): ProductIngredient
  createProductIngredients(data: [ProductIngredientCreateInput!]!): [ProductIngredient]
  updateProductIngredient(where: ProductIngredientWhereUniqueInput!, data: ProductIngredientUpdateInput!): ProductIngredient
  updateProductIngredients(data: [ProductIngredientUpdateArgs!]!): [ProductIngredient]
  deleteProductIngredient(where: ProductIngredientWhereUniqueInput!): ProductIngredient
  deleteProductIngredients(where: [ProductIngredientWhereUniqueInput!]!): [ProductIngredient]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  chemicalClasses(where: ChemicalClassWhereInput! = {}, orderBy: [ChemicalClassOrderByInput!]! = [], take: Int, skip: Int! = 0): [ChemicalClass!]
  chemicalClass(where: ChemicalClassWhereUniqueInput!): ChemicalClass
  chemicalClassesCount(where: ChemicalClassWhereInput! = {}): Int
  activeIngredientRegisters(where: ActiveIngredientRegisterWhereInput! = {}, orderBy: [ActiveIngredientRegisterOrderByInput!]! = [], take: Int, skip: Int! = 0): [ActiveIngredientRegister!]
  activeIngredientRegister(where: ActiveIngredientRegisterWhereUniqueInput!): ActiveIngredientRegister
  activeIngredientRegistersCount(where: ActiveIngredientRegisterWhereInput! = {}): Int
  regCompanies(where: RegCompanyWhereInput! = {}, orderBy: [RegCompanyOrderByInput!]! = [], take: Int, skip: Int! = 0): [RegCompany!]
  regCompany(where: RegCompanyWhereUniqueInput!): RegCompany
  regCompaniesCount(where: RegCompanyWhereInput! = {}): Int
  regCodes(where: RegCodeWhereInput! = {}, orderBy: [RegCodeOrderByInput!]! = [], take: Int, skip: Int! = 0): [RegCode!]
  regCode(where: RegCodeWhereUniqueInput!): RegCode
  regCodesCount(where: RegCodeWhereInput! = {}): Int
  productIngredients(where: ProductIngredientWhereInput! = {}, orderBy: [ProductIngredientOrderByInput!]! = [], take: Int, skip: Int! = 0): [ProductIngredient!]
  productIngredient(where: ProductIngredientWhereUniqueInput!): ProductIngredient
  productIngredientsCount(where: ProductIngredientWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
